*** PRESTISSIMO ***

This file gives an overview of the inner workings of the prestissimo site.
In general this file will serve as a 'table of contents' for the app.


** HOME PAGE/COURSE SEARCH **

  HTML: PATH is app/views/courses/

    > The search form is in PATH/index.html.erb
    >
    > Each search field is in a seperate partial located in the PATH/form_partials/
    > directory. The PATH/index.html.erb page renders each partial.
    >
    > The search results are loaded in PATH/_search.html.erb, but the results
    > themselves are constructed by the partial:
    > PATH/_search_results_template.html.erb

  JAVASCRIPT

    > Two files control the javascript on the course search page:
    >
    >	1. app/assets/javascripts/courses.js controls the help box, prompt for
    >	full semester search, more/less button
    >
    >	2. app/views/courses/search.js.erb renders the course results partial
    >   and controls the description expands

  HELP BOX

    > All the text in the help box and its functionality is defined in app/assets/javascripts/courses.js
    
  STYLING

    > All the css for the courses should be found in app/assets/stylesheets/courses.css.scss

** ADMINS **

  HTML: PATH is app/views/admins/

    > The admin hub page is at PATH/admin.html.erb

** DEPARTMENTS **

  HTML: PATH is app/views/departments/
    
    > The department links are rendered in the PATH/_searchfrom.html.erb partial.
    >
    > A single department page is displayed with PATH/show.html.erb

  JAVASCRIPT: 
  
    > The app/assets/javascripts/departments.js file has a function that shows/hides the department
    > links while viewing the site from a mobile device.

  STYLING

    > All the css for the department pages should be found in app/assets/stylesheets/departments.css.scss

** HUBCOURSES (CLASSES) **

  HTML: PATH is app/views/hubcourses

    > The Departments and Classes search page is at PATH/index.html.erb
    >
    > A single class page is displayed with PATH/show.html.erb
    >
    > The search form is constructed at PATH/_searchform.html.erb
    >
    > The search results are displayed at PATH/_search.html.erb
    
  JAVASCRIPT: PATH is app/views/hubcourses

    > The PATH/search.js file renders the hubcourse (class) search results and modifies the
    > status bar accordingly.

  STYLING

    > All the css for the department and class search page, as well as the class pages themselves,
    > should be found in app/assets/stylesheets/hubcoureses.css.scss

** INTERACT **

  > Every file in the app/views/interact/ directory represents a different email that gets sent
  > to the user through some action in the site.

  > app/mailers/interact.rb contains methods to build emails from the templates in the app/views/interact directory.

** LAYOUTS **

  HTML: PATH is app/views/layouts
  
    > The header and the footer for the site are displayed with the PATH/_header.html.erb
    > and PATH/_footer.html.erb partials, respectively.
    >
    > The PATH/application.html.erb file is the skeleton for every html page on the site.
    > It renders the header, the footer, the favicon, and whatever the current page is
    > (see the definition of <%= yield %>)

  STYLING

    > The css for the header, footer, and other global formatting can be found in
    > app/assets/stylesheets/global.css.scss 

** PROFESSORS **
  
  --A lot of the files associated with professors are no longer in use because we no longer
    rely on the LDAP for information. I will describe what the pages were for the last time
    I worked with them...

  HTML: PATH is app/views/professors/

    > A single professor page is displayed with PATH/show.html.erb
    >
    > Our old professor search page was at PATH/index.html.erb
    >
    > After the LDAP populates the database, any new professors added are displayed
    > at PATH/mass_create.html.erb ** this is deprecated...the professor database 
    > is automagically populated by the datapull script 
    >
    > The add new professors page is at PATH/new.html.erb
    >
    > PATH/populate.html.erb seems to do the same thing as mass_create.html.erb

** SESSIONS **
    
  JAVASCRIPT: PATH is app/views/sessions/

    > The hide_search.js.erb file hides/shows the help box on the home page.
    >
    > The hide_motd.js.erb file hides the message of the day box until a new one is written by an admin.

** USERS **

  HTML: PATH is app/views/users/

    > Signup and Signin forms are in the PATH/_signup.html.erb 
    > and PATH/_signin.html.erb partials, respectively. Both forms are rendered
    > in PATH/new.html.erb
    >
    > The profile page for a user is in PATH/show.html.erb
    >
    > The user settings page is in PATH/edit.html.erb
    >
    > If a user forgot their password, they will be sent to PATH/forgot_pass_page.html.erb
    >
    > Once a user gets an email about resetting their password, they will be linked
    > to the password editing form at PATH/edit_pass.html.erb
    >
    > The people search form is loaded in PATH/index.html.erb, but the
    > form itself is constructed by the partial:
    > PATH/_searchform.html.erb
    >
    > The search results are loaded in PATH/_search.html.erb

  Javascript: 

    > The javascript file PATH/search.js.erb runs when the user#search action
    > is called from the user controller. It renders the user search, handle search,
    > and professor search partials.

  Styling:

    > All styling for users should be in app/assets/stylesheets/users.css.scss


** CART **

  > Every user has a cart. Carts can also be made for non-users through a cookie. 

  HTML: PATH is app/view/carts/

    > The cart is displayed with the PATH/_show.html.erb partial, rendered by various javascript 
    > files in the same directory

  Javascript: PATH is app/view/carts/ (for the majority)

    > The files PATH/add.js.erb, PATH/create.js.erb, and PATH/update.js.erb each
    > have the javascript required for the 'email cart' and cart course description
    > functionality.
    >
    > PATH/create.js.erb renders the _show.html.erb partial too.
    >
    > PATH/show.js.erb renders the _show.html.erb partial.
    >
    > PATH/destroy.js.erb is the javascript associated with the cart#destroy action. Not sure if it actually
    > gets called...
    >
    > The javascript file app/assets/javascripts/cart has much of the same content as
    > the other cart javascript files, but it's required for the events to work in every
    > possible case.
    > 
    > PATH/destroy.js.erb 

  Controller: app/controllers/carts_controller.rb

    > Most of the actions should be fairly intuitive...but..
    >
    > add is used to put a single course in a cart (used by addtocart
    > links on hubpages),
    > update adds multiple courses to a cart (used by checkboxes
    > on course search page.
    >
    > search is called by the 'load cart' button on the cart

** SITE SETTINGS **
  
  > Settings are stored in the settings table as key,value pairs. The key is
  > the name of the setting, e.g. 'motd' and the value is the value, e.g.
  > 'Welcome to Prestissimo'...
  >
  > Settings are edited by the partial app/views/settings/_change.html.erb (appearing
  > on the admin page), and
  > the controller app/controllers/settings_controller.rb updates the setting
  > values in the db accordingly
  >
  > Settings are used for motd, comment scoring, the auto-reporting rake-task,
  > managing admins, quick access to the user and comment counts, datetime of
  > last courses import, semesters in DB

** MOTD **

  > The message of the day html is in app/views/courses/index.html.erb
  > 
  > 

** COMMENTS **

  > The overall workings of comments are somewhat convoluted..
  > We spent a lot of time considering how to handle offensive
  > comments on the site, and the processes to hide/edit/remove
  > comments are the result of our deliberations.
  >
  > Comments are NEVER deleted. If a user makes a comment and
  > immediately chooses to delete it, it will be given a 'removed'
  > status and not displayed anywhere on the site 
  >
  > Edited comments retain a viewable edit history by all student users.
  > (Old versions of a comment are no longer votable, but votes follow a comment across edits)
  >
  > Comments can be replied to. We didn't want to take the trouble of handling
  > reddit-like 'infinite' threading, so only comments can be replied to - a reply
  > cannot be made to a reply.
  > 
  > Only handles associated with student accounts can create and vote on comments.
  > A muted student handle cannot create or vote.
  > Other users (faculty and staff) can view comments, but cannot create or vote on them.
  
  
  VIEWS  app/views/comments/

    > There is no full comment view -- all comment html files are partials.
    >
    > The _index.html.erb partial loads all the comments for a given object 

  STYLING

    > The CSS for comments should all be found in app/assets/stylesheets/comments.css.scss

  JAVASCRIPT

    > app/assets/javascripts/comments.js
    > currently only provides a clicklistener to show the body of a hidden comment

  CONTROLLER app/controllers/comments_controller.rb

    > This and the reports work a little differently from most other rails objects.
    >
    > Every comment action (regardless of whether it's a collection or member action)
    > requires a 'commentable' object: professor, hubcourse, or department.
    > So each action call needs to be passed a commentable_type and commentable_id to
    > identify the commentable object the action pertains to.


** VOTES **

  > Functions similarly to comments
  > Only comments are voteable and handles are voters.


** REPORTS **

  > Reports exist to allow users to alert admins of offensive content.
  > 
  > Reports can be filed for users, handles and comments
  > 
  > The form to respond/handle reports is on the admin page
  > When a report is handled, emails are sent to the complainant and
  > sometimes to the offender (if the admin deems it prudent) --- do I sound like a lawyer?..
  >
  > There are cron jobs running to check for significant numbers of unanswered reports,
  > If one exists, a comment may be hidden or a handle could be muted automatically until an
  > admin handles it further.


MAILER

** IMAGES **

  All images are in app/assets/images or public/

** Updating/Importing Courses **

SYLLABUS

  > A syllabus table exists.
  >
  > The user and syllabus models have code for a one-to-one relationship
  > between the two, but there is no implementation of the syllabus in the
  > site.  
  >
  > Ideally, we'd like to have a feature that allows professors to upload a
  > syllabus to a course they've taught or will teach
