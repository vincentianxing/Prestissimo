#!/bin/sh

# Takes the datafile placed in datapull by CIT, checks it in to RCS
# Does a diff between the 2 most recent checkins and updates the course database

# Where data comes from
DROPDIR="/home/datadrop"
#DROPFILE=`ls ${DROPDIR}/oprestissimo_*.lis | tail -1`
DROPFILE=`ls -t1 ${DROPDIR}/*.lis | head -1`
#DROPFILE="/tmp/bktest.txt"

if [ $# -gt 0 -a -r "$1" ]
then
  DROPFILE="$1"
fi

USER=`whoami`

if [ $USER = "svradm" ]; then
    PRESTISSIMO_HOME="/var/www/html/oprestissimo.com"
else 
    PRESTISSIMO_HOME="/home/$USER/prestissimo"
fi

# Where it goes to
DESTDIR="${PRESTISSIMO_HOME}/db"
DESTFILE="${DESTDIR}/courses.txt"
DIFFOUT="${DESTDIR}/diffout"

DROPFILE_BAC="${DESTDIR}/coursefile.lis.backup"

CONVERTFILE="${DESTDIR}/converting.txt"

# To handle just the enrollments
ENROLLFILE="${DESTDIR}/enrollment.txt"
ENROLLOUT="${DESTDIR}/enrollout"

# Controls Rails status and DB selection
ENVIRONMENT="development"
#ENVIRONMENT="production"

# Where the bad lines file goes
BADLINES="${DESTDIR}/badlines.txt"


echo "Starting data_pull:" `date`
echo

export RAILS_ENV="${ENVIRONMENT}"
cd $PRESTISSIMO_HOME

# Test semester
OLDSEM=`rake db:current_semester`
if [ $? != 0 ]
then
  echo "Failed to get current semester from db"
  exit 11
fi

# Test to see if the file is readable
if [ ! -r ${DROPFILE} ]
then
  echo "Cannot read the dropfile: ${DROPFILE}"
  exit 12
else
  echo "Reading information from ${DROPFILE}"
fi

# Get the old date
OLDDATE=`rake db:courses_last_updated`
if [ $? != 0 ]
then
  echo "Failed to get previous timestamp"
  exit 13
fi

# Get the new date
NEWDATE=`ls -l --time-style=+"%Y-%m-%dT%H:%M:%S%z" ${DROPFILE} | awk '{print $6}'`
if [ $? != 0 ]
then
  echo "Failed to get new timestamp, exiting"
  exit 14
fi

# Check 
if [ "${OLDDATE}" = "${NEWDATE}" ]
then
  # Nothing changed
  echo "Timestamp hasn't changed, exiting"
  exit 0 
else
  echo "Old timestamp: ${OLDDATE}"
  echo "New timestamp: ${NEWDATE}"
fi

FILESEM=`head -n2 "${DROPFILE}" | tail -n1 | cut -d '|' -f8`
if [ -z "${FILESEM}" ]
then
  echo "No semester found from inputfile"
  echo "Line was: " `head -n2 "${DROPFILE}" | tail -n1`
  exit 2
fi
FILEYEAR=`echo "${FILESEM}" | cut -c 1-4`
FILEMONTH=`echo "${FILESEM}" | cut -c 5-6`
if [ "${FILEMONTH}" = "02" ]
then
  NEWSEM="Spring ${FILEYEAR}"
elif [ "${FILEMONTH}" = "09" ]
then
  NEWSEM="Fall ${FILEYEAR}"
else
  echo "New Semester: " $NEWSEM
  exit 3
fi

# Do a Sanity Check
echo
echo "Running Sanity Check"
echo "=============="
cp ${DROPFILE} ${DROPFILE_BAC}
CHECK="^[^\|]+\|[^\|]+\|[^\|]+\|[^\|]+\|[^\|]+\|[^\|]*\|[^\|]*\|[^\|]+\|[^\|]+\|[^\|]*\|[^\|]+\|.*$"
echo "Finding bad lines..."
egrep -vn $CHECK $DROPFILE > "${BADLINES}"
echo "Running Sanity fix..."
$PRESTISSIMO_HOME/scripts/sanity_check $BADLINES
if [ $? != 0 ]
then
  echo "Sanity check failed, backup created at ${DROPFILE_BAC}"
  exit 55
fi

# Move file to local dir
#cp "${DROPFILE}" "${DESTFILE}"
#cut -d'|' -f1-27,5,5,30- "${DROPFILE}" > "${DESTFILE}" ## UGH, doesn't work with multiple copies of '5'
#sed -n -r  -e 's/^(([^|]*\|){27})(([^|]*\|){2})(([^|]*\|){7})(([^|]*\|){1})(.*)/\1QQQ|QQQ|\5QQQ|\9/p'  "${DROPFILE}" | sort > "${DESTFILE}"
cut -d'|' -f1-33,36-45,49-51,55-57,61- "${DROPFILE}" | sort > "${DESTFILE}"
cut -d'|' -f5,34-35,47,53,59 "${DROPFILE}" | sort -n > "${ENROLLFILE}"

# Check in to RCS
ci -l -m"Auto_Checkin" "${DESTFILE}" 2>&1
NEWREV=`rlog -h "${DESTFILE}" | grep head: | cut -c 7-`
if [ -z "${NEWREV}" ]
then
  echo "Failed to get new version from RCS checkin of courses"
  echo "New Version No.: " $NEWREV
  exit 4
fi

ci -l -m"Auto_Checkin" "${ENROLLFILE}" 2>&1
NEWEREV=`rlog -h "${ENROLLFILE}" | grep head: | cut -c 7-`
if [ -z "${NEWEREV}" ]
then
  echo "Failed to get new version from RCS checkin of enrollment"
  echo "New version No.: " $NEWEREV
  exit 5
fi

# Generate diff
if [ "${OLDSEM}" != "${NEWSEM}" ]
then
  # If New Semester
  echo "New Semester $NEWSEM"
  # Add symbolic labels to RCS files
  rcs -n`echo ${NEWSEM}| tr ' ' '_'`: ${DESTFILE} ${ENROLLFILE}
  # For a new semester, we only need to handle the adds
  sed -e 's/^/> /' "${DESTFILE}" > "${DIFFOUT}"
  sed -e 's/^/> /' "${ENROLLFILE}" > "${ENROLLOUT}"
  # update our internal semester list
  rake db:current_semester["${NEWSEM}"]
  if [ $? != 0 ]
  then
    echo "Raketask to change current semester from $OLDSEM to $NEWSEM failed"
    exit 6
  fi
else
  # if old semester
  echo "Old Semester $OLDSEM"
  OLDREV=`rake db:courses_revision`
  rcsdiff -r"${OLDREV}" "${DESTFILE}" 2>&1 | egrep '^[<]' > "${DIFFOUT}"
  rcsdiff -r"${OLDREV}" "${DESTFILE}" 2>&1 | egrep '^[>]' >> "${DIFFOUT}"
  # and enrollments too
  OLDEREV=`rake db:enrollment_revision`
  rcsdiff -r"${OLDEREV}" "${ENROLLFILE}" 2>&1 | egrep '^[>]' > "${ENROLLOUT}"
fi

# Call the rake task
echo
echo "Updating courses"
echo "================"
rake db:update_courses["${DIFFOUT}","${ENROLLOUT}"] 
if [ $? != 0 ]
then
  echo "Raketask to update courses from diff files failed"
  exit 7
fi

# update associations for departments
echo
echo "Building associations"
echo "================"
rake db:assign_departments
if [ $? != 0 ]
then
    echo "Raketask to build relationships from departments failed"
    exit 8
fi

# Update revision no in db
echo
echo "Updating revision numbers"
echo "================"
rake db:courses_revision["${NEWREV}"]
if [ $? != 0 ]
then
  echo "Could not change courses revision no. setting in db to: " $NEWREV
  exit 9
fi

rake db:enrollment_revision["${NEWEREV}"]
if [ $? != 0 ]
then
  echo "Could not change enrollment revision no. setting in db to: " $NEWEREV
  exit 10
fi

rake db:courses_last_updated["${NEWDATE}"]
if [ $? != 0 ]
then
  echo "Could not courses_last_updated to ${NEWDATE}"
  exit 15
fi

echo
echo "Successful data_pull:" `date`

CRONOUTFILE="$PRESTISSIMO_HOME/log/data_pull_log"
if [ -r ${CRONOUTFILE} ]
then
  cp "${CRONOUTFILE}" "${CRONOUTFILE}.lastgood"
fi

# vim: ts=8 sts=2 sw=2 : 
